"""
PyCSW models

Defines the structure of the database by using SQLAlchemy Declarative
"""

from sqlalchemy import (Column, Integer, Text, Sequence)
from sqlalchemy.ext.declarative import declarative_base

from .config import StaticContext


Base = declarative_base()


# this function could be moved to the utils module and be used throughout,
# if needed (but it is probably not needed)
def _get_mapping(identifier, context=None):
    context = context or StaticContext()
    column_name = context.md_core_model["mappings"].get(identifier)
    return column_name


class SpatialRefSys(Base):
    __tablename__ = "spatial_ref_sys"

    srid = Column(Integer, Sequence("spatial_ref_sys_id_seq"),
                  nullable=False, primary_key=True)
    auth_name = Column(Text)
    auth_srid = Column(Integer)
    srtext = Column(Text)


class GeometryColumn(Base):
    __tablename__ = "geometry_columns"

    f_table_name = Column(Text, nullable=False, primary_key=True)
    f_geometry_column = Column(Text, nullable=False, primary_key=True)
    f_table_catalog = Column(Text, nullable=False)
    f_table_schema = Column(Text, nullable=False)
    geometry_type = Column(Integer)
    coord_dimension = Column(Integer)
    srid = Column(Integer, nullable=False)
    geometry_format = Column(Text, nullable=False)


class Record(Base):
    """
    Database model for metadata records.

    This class follows sqlalchemy's declarative extension. Names of columns
    in the database are created in accordance with the mappings defined
    in the config module. This makes it possible to use pycsw with a different
    database schema, possibly by using a database generated by another
    application.

    Even if the actual SQL column names are dependent on the configured
    mappings, the attribute names of Record instances are constant. This allows
    pycsw to use a consistent interface to talk to the database table that
    holds metadata records.
    """

    __tablename__ = "records"

    identifier = Column(_get_mapping("pycsw:Identifier"), Text,
                        Sequence("record_id_seq"), primary_key=True)
    typename = Column(_get_mapping("pycsw:Typename"), Text,
                      default='csw:Record',
                      nullable=False, index=True)
    schema = Column(_get_mapping("pycsw:Schema"), Text,
                    default='http://www.opengis.net/cat/csw/2.0.2',
                    nullable=False, index=True)
    mdsource = Column(_get_mapping("pycsw:MdSource"), Text, default='local',
                      nullable=False, index=True)
    insert_date = Column(_get_mapping("pycsw:InsertDate"), Text, nullable=False,
                         index=True)
    xml = Column(_get_mapping("pycsw:XML"), Text, nullable=False)
    anytext = Column(_get_mapping("pycsw:AnyText"), Text, nullable=False)
    language = Column(_get_mapping("pycsw:Language"), Text, index=True)
    # identification
    type = Column(_get_mapping("pycsw:Type"), Text, index=True)
    title = Column(_get_mapping("pycsw:Title"), Text, index=True)
    title_alternate = Column(_get_mapping("pycsw:AlternateTitle"), Text,
                             index=True)
    abstract = Column(_get_mapping("pycsw:Abstract"), Text, index=True)
    keywords = Column(_get_mapping("pycsw:Keywords"), Text, index=True)
    keywordtype = Column(_get_mapping("pycsw:KeywordType"), Text,
                          index=True)
    parentidentifier = Column(_get_mapping("pycsw:ParentIdentifier"), Text,
                              index=True)
    relation = Column(_get_mapping("pycsw:Relation"), Text, index=True)
    time_begin = Column(_get_mapping("pycsw:TempExtent_begin"), Text,
                        index=True)
    time_end = Column(_get_mapping("pycsw:TempExtent_end"), Text, index=True)
    topicategory = Column(_get_mapping("pycsw:TopicCategory"), Text,
                          index=True)
    resourcelanguage = Column(_get_mapping("pycsw:ResourceLanguage"), Text,
                              index=True)
    # attribution
    creator = Column(_get_mapping("pycsw:Creator"), Text, index=True)
    publisher = Column(_get_mapping("pycsw:Publisher"), Text, index=True)
    contributor = Column(_get_mapping("pycsw:Contributor"), Text, index=True)
    organization = Column(_get_mapping("pycsw:OrganizationName"), Text,
                          index=True)
    # security
    securityconstraints = Column(_get_mapping("pycsw:SecurityConstraints"),
                                 Text, index=True)
    accessconstraints = Column(_get_mapping("pycsw:AccessConstraints"), Text,
                               index=True)
    otherconstraints = Column(_get_mapping("pycsw:OtherConstraints"), Text,
                              index=True)
    # date
    date = Column(_get_mapping("pycsw:Date"), Text, index=True)
    date_revision = Column(_get_mapping("pycsw:RevisionDate"), Text,
                           index=True)
    date_creation = Column(_get_mapping("pycsw:CreationDate"), Text,
                           index=True)
    date_publication = Column(_get_mapping("pycsw:PublicationDate"), Text,
                              index=True)
    date_modified = Column(_get_mapping("pycsw:Modified"), Text, index=True)

    format = Column(_get_mapping("pycsw:Format"), Text, index=True)
    source = Column(_get_mapping("pycsw:Source"), Text, index=True)
    # geospatial
    crs = Column(_get_mapping("pycsw:CRS"), Text, index=True)
    geodescode = Column(_get_mapping("pycsw:GeographicDescriptionCode"), Text,
                        index=True)
    denominator = Column(_get_mapping("pycsw:Denominator"), Text, index=True)
    distancevalue = Column(_get_mapping("pycsw:DistanceValue"), Text,
                           index=True)
    distanceuom = Column(_get_mapping("pycsw:DistanceUOM"), Text, index=True)
    wkt_geometry = Column(_get_mapping("pycsw:BoundingBox"), Text)
    # service
    servicetype = Column(_get_mapping("pycsw:ServiceType"), Text, index=True)
    servicetypeversion = Column(_get_mapping("pycsw:ServiceTypeVersion"),
                                Text, index=True)
    operation = Column(_get_mapping("pycsw:Operation"), Text, index=True)
    couplingtype = Column(_get_mapping("pycsw:CouplingType"), Text,
                          index=True)
    operateson = Column(_get_mapping("pycsw:OperatesOn"), Text, index=True)
    operatesonidentifier = Column(_get_mapping("pycsw:OperatesOnIdentifier"),
                                  Text, index=True)
    operatesoname = Column(_get_mapping("pycsw:OperatesOnName"), Text,
                           index=True)
    # additional
    degree = Column(_get_mapping("pycsw:Degree"), Text, index=True)
    classification = Column(_get_mapping("pycsw:Classification"), Text,
                            index=True)
    conditionapplyingtoaccessanduse = Column(
        _get_mapping("pycsw:ConditionApplyingToAccessAndUse"),
        Text, index=True
    )
    lineage = Column(_get_mapping("pycsw:Lineage"), Text, index=True)
    responsiblepartyrole = Column(_get_mapping("pycsw:ResponsiblePartyRole"),
                                  Text, index=True)
    specificationtitle = Column(_get_mapping("pycsw:SpecificationTitle"),
                                Text, index=True)
    specificationdate = Column(_get_mapping("pycsw:SpecificationDate"), Text,
                               index=True)
    specificationdatetype = Column(
        _get_mapping("pycsw:SpecificationDateType"), Text, index=True)

    # distribution
    # links: format "name,description,protocol,url[^,,,[^,,,]]"
    links = Column(_get_mapping("pycsw:Links"), Text, index=True)
